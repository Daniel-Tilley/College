SET serveroutput ON
DECLARE
  V_STUDENT TAKES_MODULE.studentno%TYPE;
  V_PROG_CODE TAKES_MODULE.prog_code%TYPE := '&Enter_Program_Code';
  V_MODULE_CODE TAKES_MODULE.module_code%TYPE;
  V_STAGE_CODE TAKES_MODULE.stage_code%TYPE := &Enter_Stage_Code;
  --V_SCORE TAKES_MODULE.score%TYPE;
  
  -- DECLARE CURRENT DETAILS CURSOR
  CURSOR CURRENT_DETAILS
  IS
    SELECT studentno, prog_code, stage_code, module_code 
    FROM STUDENT
    JOIN STAGE USING (prog_code, stage_code)
    JOIN MODULE_RUN USING (stage_code, prog_code)
    JOIN MODULE USING (module_code)
    WHERE (module_status LIKE 'C') ORDER BY studentno;
  
  --INITIALISE CURRENT CURSOR AS CUR_CURRENT_DETAILS
  CUR_CURRENT_DETAILS CURRENT_DETAILS%ROWTYPE;
  
BEGIN
  --OPEN CURSOR
  OPEN CURRENT_DETAILS;
  
  --START LOOP
  LOOP
    --TAKE DETAILS INTO INITIALISED CURSOR
    FETCH CURRENT_DETAILS INTO CUR_CURRENT_DETAILS;
    
    --BREAK FROM LOOP IF NO MORE DATA IS FOUND
    EXIT WHEN CURRENT_DETAILS%NOTFOUND;
    
    --CHECK IF CURSOR DETAILS MATCH THOSE ENETERED
    IF (CUR_CURRENT_DETAILS.prog_code LIKE V_PROG_CODE
    AND CUR_CURRENT_DETAILS.stage_code = V_STAGE_CODE)
    THEN
       --DO INSERT  
      INSERT INTO TAKES_MODULE(studentno, prog_code, stage_code, module_code)
      VALUES (CUR_CURRENT_DETAILS.studentno, CUR_CURRENT_DETAILS.prog_code, CUR_CURRENT_DETAILS.stage_code, CUR_CURRENT_DETAILS.module_code);
    END IF;
  END LOOP;
  
  --CLOSE CURSOR AND COMMIT DATA
  CLOSE CURRENT_DETAILS;
  COMMIT;
  
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No data found');
    rollback;
    
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error code: '||SQLCODE||' means '||SQLERRM);
    rollback work;
END;