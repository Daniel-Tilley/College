--revision sheet

SELECT * FROM CD_ATTENDEE;
SELECT * FROM CD_ATTENDS;
SELECT * FROM CD_CODING_SESSION;
SELECT * FROM CD_FACILITATOR;
SELECT * FROM CD_LOCATION;
SELECT * FROM CD_ORGANIZER;
SELECT * FROM CD_SESSION_RUNS;
SELECT * FROM CD_SPECIALITY;

--QUESTION 1
SELECT UNIQUE Coder_Name 
FROM CD_ATTENDEE
JOIN CD_ATTENDS USING (CODER_ID)
JOIN CD_SESSION_RUNS USING (S_START,loc_id,spec_code)
JOIN CD_FACILITATOR USING (FACILITATOR_ID)
WHERE facilitator_name like 'Ken';

--QUESTION 2
SELECT coder_name, count(*)
FROM cd_attendee
JOIN cd_attends USING (coder_id)
GROUP BY coder_name HAVING COUNT(*) > 2;

--QUESTION 3
SELECT organizer_name, loc_name 
FROM CD_ORGANIZER
JOIN CD_CODING_SESSION USING (organizer_id)
JOIN CD_LOCATION USING (loc_id);

--QUESTION 4
SELECT organizer_name
FROM CD_ORGANIZER
UNION
SELECT facilitator_name 
FROM CD_FACILITATOR;

--QUESTION 5
SELECT facilitator_name
FROM CD_FACILITATOR
MINUS
SELECT organizer_name
FROM CD_ORGANIZER;

--QUESTION 6
SELECT coder_name, badge_earned, spec_name
FROM CD_ATTENDEE
JOIN CD_ATTENDS USING (coder_id)
JOIN CD_SPECIALITY USING (spec_code)
WHERE badge_earned IS NOT NULL;

--QUESTION 7
--FIRST PART OF QUERY TO GET NAME
SELECT coder_name
FROM CD_ATTENDEE
WHERE NOT EXISTS
  
  --SECOND PART OF QUERY USED TO CHECK FOR KEN IN FACILITATOR TABLE
  (SELECT * FROM CD_FACILITATOR
  WHERE (facilitator_name LIKE 'Ken') AND NOT EXISTS
    
    --THIRD PART OF QUERY USED TO JOIN TWO TABLES USING (CD_ATTENDEE AND CD_FACILITATOR)
    --USING TWO OTHER TABLES (CD_ATTENDS AND CD_SESION_RUNS)
    (SELECT * FROM CD_ATTENDS --CAN SWAP CD_ATTENDS AND CD_SESSION_RUNS
    JOIN CD_SESSION_RUNS USING (s_start, loc_id, spec_code) --3 ATTRIBUTES USED AS THERE ARE 3 PRIMARY KEYS IN BOTH TABLES
    
    --LINKING CD_ATTENDS -> CD_ATTENDEE
    --LINKING CD_FACILITAOR -> CD_SESSION_RUNS
    WHERE
    CD_ATTENDEE.coder_id = CD_ATTENDS.coder_id AND
    CD_SESSION_RUNS.Facilitator_Id = CD_FACILITATOR.Facilitator_Id));